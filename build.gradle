import java.util.zip.ZipInputStream

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "1.0.5"
group= "com.replaymod"
archivesBaseName = "replaymod"

minecraft {
    coreMod = 'com.replaymod.core.LoadingPlugin'
    version = '1.8-11.14.4.1563'
    runDir = "eclipse"
    mappings = "snapshot_nodoc_20141130"
}

repositories {
    maven {
        name = "SpongePowered Repo"
        url = "http://repo.spongepowered.org/maven/"
    }
    maven {
        url 'https://repo.spacehq.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.4'

    compile 'org.spongepowered:mixin:0.4.3'
    compile 'com.googlecode.mp4parser:isoparser:1.1.7'

    compile 'org.aspectj:aspectjrt:1.8.2'

    compile project(':jGui')
    compile project(':ReplayStudio')

    testCompile 'junit:junit:4.11'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    dependsOn configurations.compile
    dependsOn ':ReplayStudio:shadowJar'

    def shade = {files(configurations.compile.findAll { c ->
        ['mixin', 'isoparser', 'aspectjrt', 'jGui'].any {c.name.startsWith("$it-")}
    } + getTasks().getByPath(':ReplayStudio:shadowJar').outputs.files)}

    def noticeDir = file("$buildDir/NOTICE")
    doFirst {
        noticeDir.deleteDir()
        noticeDir.mkdirs()
        shade().collect { it.isDirectory() ? fileTree(it) : zipTree(it) }.each {
            it.matching { include '**/NOTICE*' }.each {
                new File(noticeDir, 'NOTICE.txt') << it.getText('UTF-8') + '\n'
            }
        }
    }
    from noticeDir

    def langDir = file("$buildDir/languages")
    doFirst {
	try {
        langDir.deleteDir()
        langDir.mkdirs()
        def dir = new File(langDir, 'assets/replaymod/lang/')
        dir.mkdirs()
        def zip = new ZipInputStream(new URL('http://replaymod.com/api/grab_languages').openStream())
        def e;
        while ((e = zip.nextEntry) != null) {
            new File(dir, e.getName()) << zip
            zip.closeEntry()
        }
	} catch(Exception e) {
	    e.printStackTrace();
	}
    }
    from (langDir) {
        exclude '**/en_US.lang'
    }

    from ({shade().collect { it.isDirectory() ? it : zipTree(it) }}) {
        exclude '**/NOTICE*'
        // exclude everything taken in from jGui for running the mod in a dev environment
        exclude { new File(file('jGui/src/main/resources'), it.relativePath.pathString).exists() }
        eachFile {
            if (getName() == 'LICENSE.txt') {
                setName(getFile().getParentFile().getName().split('-')[0] + '-LICENSE.txt')
            }
        }
    }

    manifest {
         attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                 'TweakOrder': '0',
                 'FMLAT': 'replaymod_at.cfg'
	}
}

def getGitCommitHash() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty=*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (e) {
        return "unknown"
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version + '-' + getGitCommitHash(), 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        resources {
            srcDir 'jGui/src/main/resources'
        }
        refMap = "mixins.replaymod.refmap.json"
    }
}

defaultTasks 'build'
